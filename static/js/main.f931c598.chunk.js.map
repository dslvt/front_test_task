{"version":3,"sources":["logo.svg","TableCard.js","App.js","serviceWorker.js","data.js","index.js"],"names":["module","exports","TableCard","props","state","sign","this","cur_price","rec_price","date","Date","setTime","Number","getDay","getMonth","getYear","className","checked","onClick","onclick","React","Component","Table","handleClick","id","setState","clicked","includes","filter","i","formatDate","timestamp","toDateString","data","bind","tableHeader","v","a","indexOf","map","d","category","firstRow","sort","b","tableData","Array","length","e","j","res","row","card_data","current_price","recommend_price","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f931c598.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './TableCard.css';\n\n\nclass TableCard extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {...props};\n    }\n\n    render(){\n        let sign = \"\";\n        if (this.state.cur_price > this.state.rec_price){\n            sign = \"üëç\";\n        }else if (this.state.cur_price < this.state.rec_price){\n            sign = \"üëé\";\n        }else{\n            sign = \"üëå\";\n        }\n\n        let date = new Date();\n        date.setTime(Number(this.state.date));\n        let st_time = `${date.getDay()}:${date.getMonth()}:${date.getYear()}`;\n\n        return(\n            <div className={this.props.checked?\"tableCard checkedCard\":\"tableCard\"} onClick={this.props.onclick}>\n                <div className=\"priceHolder\">\n                    <div>{this.state.cur_price}</div>\n                    <div>{this.state.rec_price}</div>\n                </div>\n                <div>{sign}</div>\n            </div>\n        );\n    }\n}\n\nexport default TableCard;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TableCard from './TableCard';\n\nclass Table extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {data: this.props.data, clicked: []};\n    this.formatDate = this.formatDate.bind(this);\n  }\n\n  handleClick = (id) => {\n    this.setState(state => ({\n      clicked: this.state.clicked.includes(id)? this.state.clicked.filter(i => i !== id) : [...this.state.clicked, id]\n    }));\n  } \n  formatDate = (timestamp) => {\n    let date = new Date(timestamp);\n    return date.toDateString();\n  }\n\n  render(){\n    let tableHeader = this.state.data.filter((v, i, a) => a.indexOf(v) === i).map((d)=>{\n      return d.category;\n    });\n    let firstRow = this.state.data\n      .filter((v, i, a) => a.indexOf(v) === i)\n      .sort((a, b) => a.date - b.date);\n    \n\n    let tableData = [...Array(tableHeader.length)].map(e => Array(firstRow.length));\n    for(let i = 0; i < tableHeader.length; i++){\n      for(let j = 0; j < firstRow.length; j++){\n        let res = this.state.data.filter((d) => d.category === tableHeader[i])\n        res = res.filter((d) => d.date === firstRow[j].date);\n        if(res.length !== 0){\n          tableData[i][j] = res[0];\n        }else{\n          tableData[i][j] = null;\n        }\n      }\n    }\n\n    return(\n      <div className=\"Table\">\n        <table>\n          <thead><tr>{[\"\", ...tableHeader].map((d) => <th>{d}</th>)}</tr></thead>\n          <tbody>\n            {tableData.map((row, i) => <tr>{[this.formatDate(firstRow[i].date) , ...row.map((card_data) => {\n              return card_data!==null? <td><TableCard cur_price={card_data.current_price} rec_price={card_data.recommend_price} date={card_data.date} key={card_data.id} \n              checked={this.state.clicked.includes(card_data.id)}\n              onclick={this.handleClick.bind(this, card_data.id)}></TableCard></td> : <td>-</td>})]}</tr>)}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\nexport default Table;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let data = [\n    {\n        id: 1, \n        category: \"Single\",\n        current_price: 1200,\n        recommend_price: 1300,\n        date: 1587669180804\n    },\n    {\n        id: 2, \n        category: \"Double\",\n        current_price: 200,\n        recommend_price: 100,\n        date: 1587669236178\n    },\n    {\n        id: 3,\n        category: \"Queen\",\n        current_price: 5000,\n        recommend_price: 5000,\n        date: 1587669283015\n    }\n]\n\nexport default data;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Table from './App';\nimport * as serviceWorker from './serviceWorker';\nimport data from './data';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Table data={data}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}